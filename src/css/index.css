.clearBox{
  clear: both;
}

/* 这个是容器的基本样式，和下面居中对齐的实现，没有关系 */
.box{
  width: 100px;
  height:100px;
  margin:10px;
  float: left;
}

/* 居中对齐实现方式1 */
/* 这里css不多，但是都很重要的，容易记错写错 */
.fatherBox{
  text-align: center; /* 这个非常重要，不要写成 margin:0 auto; 这个是block的水平居中 */
}
.sonBox{
  display: inline-block;
  width:50px;
  vertical-align: middle;
}
.fatherBox:before{ /* 这个非常重要，这个是对外层设置的，而不是子元素 */
  display: inline-block;
  content: '';
  height: 100%;
  vertical-align: middle;
  margin-right: -0.25em; /* 这个修正是必须的 */
}


/* 
  flex ：伸缩以填充空白、收缩以适应小空间
  以前我们常常用float、position进行布局，但是在实现以下布局时，常常不是很方便：
  1）垂直居中
  2）子元素们占用相等的高度或者宽度
  3）多列布局中，不管每列内容多少，都可以等高
  flex中的概念
  1）主轴：就是弹性布局的布局特性(flex-direction可以改变其方向)
  2）横轴
  3）flex容器：下面的 fatherBox2
  4）flex元素：下面的 article
  5）flex: 1： 表示除了占有内外边距之外，每个元素都占有等量的空间
  6）flex: 1 200px; 这个在5）的基础上设置了最小的宽度限定。有足够空间的话，优先分配flex元素200像素位置，剩下的再看着办。这种写法是简写，单独的话用 flex-grow 、flex-basis 设置。（flex-shrink也可以简写到flex，这个用法比较高级，这里不介绍）

  注意点：
  flex比其他的css要复杂一点。而且兼容要做好。像阴影什么的不支持也没啥关系，但是用不支持flex的浏览器，样式就全乱套了..

  小结：
  所以核心的几个属性就是：
  1）作用于父级
    align-items 对齐设置，默认是 stretch（这就是为什么下面案例，高度是对齐的）
    justify-content  项对于主轴而言的分布
    flex-flow 流向设置
  2）作用于子级
    flex 大小间距设定
    order: 1; 这个属性可以更改元素的排列位置，这是以前的无法做到的。（默认是是0，设置1就说明要往后排了）
  
*/

.fatherBox2{
  display: flex;
}
article {
  margin:5px;
  background: coral;
}


.fatherBox3{
  display: flex;
  flex-direction: column;
}

.fatherBox4{
  display: flex;
  flex-direction: column-reverse;
}

.fatherBox5{
  display: flex;
}

.fatherBox6{
  display: flex;
  flex-wrap: wrap;
}

.fatherBox7{
  display: flex;
  flex-wrap: wrap;
}
.fatherBox7 article{
  flex: 20px; /* 表示每个至少20px */
}

.fatherBox8{
  display: flex;
  /* 这个是对flex-direction、flex-wrap的简写 */
  flex-flow: column wrap ;
}

/* 使用flex实现的居中 */
.fatherBox9{
  display: flex;
  align-items:center;
  justify-content: space-around;
}






/* 布局 左右定宽，中间自适应 */
.layoutBox{
  display:flex;
}
.layoutBoxL{
  background:darkseagreen;
  width: 200px;
}
.layoutBoxM{
  background:plum;
  flex: 1;
}
.layoutBoxR{
  background:deepskyblue;
  width: 200px;
}








